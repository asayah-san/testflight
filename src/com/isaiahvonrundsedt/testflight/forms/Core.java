package com.isaiahvonrundsedt.testflight.forms;

import com.isaiahvonrundsedt.testflight.core.Simulator;
import com.isaiahvonrundsedt.testflight.core.AppTableModel;
import com.isaiahvonrundsedt.testflight.core.Request;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Core implements ActionListener {

    private JFrame frame;
    private JPanel root;
    private JTextField requestField;
    private JButton requestButton;
    private JTable requestsTable;
    private JTable statusTable;

    private int requestDone = 0;
    private int frameSize;
    private int requestsAmount;

    private Simulator simulator;

    Core(JFrame frame, int frameSize, int requestAmount, int method) {
        this.frame = frame;
        this.frameSize = frameSize;
        this.requestsAmount = requestAmount;

        $$$setupUI$$$();

        requestButton.addActionListener(this);

        simulator = new Simulator(method, frameSize);
        simulator.setOutputTable(requestsTable);
        simulator.setStatusTable(statusTable);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        int requestValue = 0;
        try {
            requestValue = Integer.parseInt(requestField.getText());
        } catch (NumberFormatException ex) {
            finish();
        }

        if (requestDone < requestsAmount) {
            simulator.newRequest(requestValue);
            requestDone++;
        } else
            finish();
    }

    private void finish() {
        this.frame.dispose();

        int hits = simulator.getHitCount();
        int faults = simulator.getFaultCount();

        JFrame frame = new JFrame(Results.title);
        frame.setContentPane(new Results(frame, hits, faults).getRoot());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    JPanel getRoot() {
        return root;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new BorderLayout(16, 16));
        root.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(16, 16, 16, 16), null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        root.add(panel1, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Slate For OnePlus", Font.PLAIN, 14, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Enter Request:");
        panel1.add(label1);
        requestField = new JTextField();
        requestField.setColumns(10);
        Font requestFieldFont = this.$$$getFont$$$("Slate For OnePlus", Font.PLAIN, 14, requestField.getFont());
        if (requestFieldFont != null) requestField.setFont(requestFieldFont);
        panel1.add(requestField);
        requestButton = new JButton();
        Font requestButtonFont = this.$$$getFont$$$("Slate For OnePlus", Font.PLAIN, 14, requestButton.getFont());
        if (requestButtonFont != null) requestButton.setFont(requestButtonFont);
        requestButton.setText("OK");
        panel1.add(requestButton);
        Font requestsTableFont = this.$$$getFont$$$("Slate For OnePlus", Font.PLAIN, 14, requestsTable.getFont());
        if (requestsTableFont != null) requestsTable.setFont(requestsTableFont);
        root.add(requestsTable, BorderLayout.CENTER);
        Font statusTableFont = this.$$$getFont$$$("Slate For OnePlus", Font.PLAIN, 14, statusTable.getFont());
        if (statusTableFont != null) statusTable.setFont(statusTableFont);
        statusTable.setShowHorizontalLines(false);
        statusTable.setShowVerticalLines(false);
        root.add(statusTable, BorderLayout.SOUTH);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private void createUIComponents() {
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);

        int defaultCellSize = 20;

        requestsTable = new JTable(new AppTableModel(frameSize, requestsAmount));
        requestsTable.setRowHeight(defaultCellSize);

        TableColumnModel requestModel = requestsTable.getColumnModel();
        for (int i = 0; i < requestsTable.getColumnModel().getColumnCount(); i++) {
            requestModel.getColumn(i).setPreferredWidth(defaultCellSize);
            requestModel.getColumn(i).setCellRenderer(renderer);
        }

        statusTable = new JTable(new AppTableModel(1, requestsAmount));
        statusTable.setRowHeight(defaultCellSize);

        TableColumnModel statusModel = statusTable.getColumnModel();
        for (int i = 0; i < statusTable.getColumnModel().getColumnCount(); i++) {
            statusModel.getColumn(i).setPreferredWidth(defaultCellSize);
            statusModel.getColumn(i).setCellRenderer(renderer);
        }
    }
}
